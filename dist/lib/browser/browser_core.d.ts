import { FinalBrowserSettings, OpenSettings, MediaOptions } from '../types';
import PuppeteerPage from '../puppeteer_wrapper/puppeteer_page';
import { ViewportOptions, Page, Response, Frame, BrowserContext, GeoOptions, Permission, MediaType } from '../puppeteer_wrapper/puppeteer_types';
import PuppeteerContext from '../puppeteer_wrapper/puppeteer_context';
import HeaderHelper from './helpers/header_helper';
export default abstract class BrowserCore {
    initialResponse: Response | null;
    _headerHelper: HeaderHelper;
    protected _page: PuppeteerPage;
    protected _context: PuppeteerContext;
    protected _originalHtml?: string;
    protected _settings: FinalBrowserSettings;
    private _loaded;
    private _disabled;
    private _components;
    private _cache;
    private _openSettings;
    constructor(context: PuppeteerContext, page: PuppeteerPage, settings: FinalBrowserSettings, components?: Array<string>);
    get page(): Page;
    get context(): BrowserContext;
    get loaded(): boolean;
    get incognito(): boolean;
    get cacheEnabled(): boolean;
    open(url: string, options?: OpenSettings): Promise<void>;
    openFile(filepath: string, options: OpenSettings): Promise<void>;
    setContent(html: string): Promise<void>;
    setMedia(mediaOptions: MediaOptions | MediaType): Promise<void>;
    close(): Promise<void>;
    evaluate(cb: string | ((...args: Array<any>) => any), ...args: Array<any>): Promise<any>;
    pages(): Promise<Array<Page>>;
    selectPage(index: number): Promise<void>;
    closePage(index: number): Promise<void>;
    setViewport(config?: ViewportOptions): Promise<void>;
    setTimezone(tz?: string): Promise<void>;
    setGeolocation(geolocation: GeoOptions): Promise<void>;
    overridePermissions(url: string, permissions: Array<Permission> | Permission): Promise<void>;
    url(): Promise<string | null>;
    frames(): Array<Frame>;
    mockDate(date: Date, options?: {
        freeze: boolean;
    }): Promise<void>;
    clearDateMock(): Promise<void>;
    addScript(scriptPath: string): Promise<void>;
    setCache(value: boolean): Promise<void>;
    protected _beforeClose(): Promise<void>;
    protected _beforeOpen(options: OpenSettings): Promise<void>;
    protected _afterPageLoad(): Promise<void>;
    private _addJsScripts;
    private _setupEvaluateArguments;
    private _callComponentsMethod;
    private _generateQueryString;
    private _processUrl;
    private _setEventListeners;
}
